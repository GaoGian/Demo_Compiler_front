program → { declared stmt }
declared → typeD factor ; declared | ε
typeD → type component
type → int | float
component → [ ◀digit▶ ] component | ε

stmt → whilecycle stmt | docycle stmt | ifcycle stmt | assign stmt | ε
whilecycle → while ( bexpr ) { stmt }
docycle → do assign while ( bexpr ) ;
ifcycle → if ( bexpr ) assign

bexpr → factor > factor | factor < factor | factor >= factor | factor <= factor | factor == factor | factor != factor | true | false
assignList → assign assignList | ε
assign → factor = expression ; | break ;
expression → expression + term | expression - term | term
term → term * factor | term / factor | factor | ◀number▶ | ◀digit▶
factor → ◀id▶ | factor [ ◀digit▶ ] | factor [ ◀id▶ ]