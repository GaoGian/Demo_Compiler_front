#包名 import包列表 类声明
javaLanguage → packageDeclaration importDeclaration classDeclaration

#包名
packageDeclaration → ◀package▶ qualifiedName ◀;▶ | ε
importDeclaration → ◀import▶ qualifiedName ◀;▶ importDeclaration | ε
qualifiedName → ◀Identifier▶ IdentifierRepeat
IdentifierRepeat → ◀.▶ ◀Identifier▶ IdentifierRepeat | ε

#类声明
classDeclaration → modifierDeclaration ◀class▶ ◀Identifier▶ extendsInfo classBody
#类继承信息
extendsInfo → ◀extends▶ ◀Identifier▶ | ε

#权限
modifierDeclaration → ◀public▶ | ◀protected▶ | ◀private▶ | ◀static▶

#类体
classBody → ◀{▶ classBodyDeclaration ◀}▶
classBodyDeclaration → fieldDeclaration classBodyDeclaration | constructorDeclaration classBodyDeclaration | methodDeclaration classBodyDeclaration | ε

#类属性声明
fieldDeclaration → modifierDeclaration typeDeclaration ◀Identifier▶ variableInitializer ◀;▶

#变量类型声明
typeDeclaration → ◀boolean▶ typeComponent | ◀char▶ typeComponent | ◀byte▶ typeComponent | ◀short▶ typeComponent | ◀int▶ typeComponent | ◀long▶ typeComponent | ◀float▶ typeComponent | ◀double▶ typeComponent | ◀Identifier▶ typeComponent
#数组声明
typeComponent → ◀[▶ ◀]▶ typeComponent | ε

#构造体声明
constructorDeclaration → modifierDeclaration ◀Identifier▶ formalParameters constructorBody
constructorBody → ◀{▶ explicitConstructorInvocation blockStatement ◀}▶
explicitConstructorInvocation → ◀super▶ ◀(▶ expressionList ◀)▶

#方法声明
methodDeclaration → modifierDeclaration typeDeclaration ◀Identifier▶ formalParameters methodBody | modifierDeclaration ◀void▶ ◀Identifier▶ formalParameters methodBody
#方法变量声明
formalParameters → ◀(▶ formalParameterDecls ◀)▶
formalParameterDecls → typeDeclaration ◀Identifier▶ formalParameterDeclsRest | ε
formalParameterDeclsRest → ◀,▶ typeDeclaration ◀Identifier▶ formalParameterDeclsRest | ε
#方法体声明
methodBody → block

#代码块
block → ◀{▶ blockStatement ◀}▶
#代码语句
blockStatement → localVariableDeclarationStatement blockStatement | statement blockStatement | ε
#局部变量声明
localVariableDeclarationStatement → typeDeclaration ◀Identifier▶ variableInitializer ◀;▶
#局部变量初始化
variableInitializer → ◀=▶ expression | ε

#方法语句
statement → ◀if▶ ◀(▶ parExpression ◀)▶ block elseIfStatement elseStatement | ◀for▶ ◀(▶ forControl ◀)▶ block | ◀while▶ ◀(▶ parExpression ◀)▶ block | ◀do▶ block ◀while▶ ◀(▶ parExpression ◀)▶ ◀;▶ | ◀switch▶ ◀(▶ parExpression ◀)▶ switchBlock | ◀return▶ expression ◀;▶ | ◀break▶ ◀;▶ | ◀continue▶ ◀;▶ | expression ◀;▶
#else if 部分
elseIfStatement → ◀else▶ ◀if▶ block elseIfStatement | ε
#else 部分
elseStatement → ◀else▶ block | ε
#表达式 ‘|’ 替换成 ‘&#124;’
parExpression → expressionTerm ◀&#124;&#124;▶ expressionTerm | expressionTerm ◀&&▶ expressionTerm | expression
expressionTerm → expressionFactor ◀>▶ expressionFactor | expressionFactor ◀>=▶ expressionFactor | expressionFactor ◀<▶ expressionFactor | expressionFactor ◀<=▶ expressionFactor
expressionFactor → expression ◀==▶ expression | expression ◀!=▶ expression | expression
#表达式
expression → targetVariable arrayRest | targetVariable ◀(▶ expressionList ◀)▶ methodRefRest | ◀new▶ ◀Identifier▶ ◀(▶ expressionList ◀)▶ methodRefRest | computeExpression | ◀String▶ | ◀true▶ | ◀false▶
expressionList → expression expressionListRest | ε
expressionListRest → ◀,▶ expression expressionListRest | ε

#引用链声明
methodRefRest → ◀.▶ ◀Identifier▶ arrayRest methodRefRest | ◀.▶ ◀Identifier▶ ◀(▶ expressionList ◀)▶ methodRefRest | ε

#引用声明
targetVariable → ◀Identifier▶ variableDeclaratorIdRest | ◀this▶ ◀.▶ ◀Identifier▶ variableDeclaratorIdRest
variableDeclaratorIdRest → arrayRest ◀.▶ ◀Identifier▶ variableDeclaratorIdRest | ε
arrayRest → [ ◀Digit▶ ] arrayRest | ε

#计算公式
computeExpression → expression ◀+▶ term | expression ◀-▶ term | term
#乘除表达式因子
term → term ◀*▶ factor | term ◀/▶ factor | factor
factor → ◀(▶ expression ◀)▶ | ◀Number▶ | ◀Digit▶

#for循环条件表达式
forControl → forInit ◀;▶ parExpression ◀;▶ forUpdate
forInit → localVariableDeclarationStatement
forUpdate → expression

#switch
switchBlock → ◀{▶ switchBlockStatementGroup switchLabel ◀}▶
switchBlockStatementGroup → switchLabel blockStatement
switchLabel → ◀case▶ ◀Digit▶ ◀:▶ | ◀case▶ ◀Number▶ ◀:▶ | ◀case▶ ◀String▶ ◀:▶ | ◀default▶ ◀:▶








